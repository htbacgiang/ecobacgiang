import { useState, useRef, useEffect } from "react";
import BusinessPhilosophy from "../../components/about/BusinessPhilosophy ";
import Intro from "../../components/about/Intro";
import QualityPolicy from "../../components/about/QualityPolicy";
import DefaultLayout from "../../components/layout/DefaultLayout";
import Head from "next/head";
import Image from "next/image";

export default function AboutSection() {
  const [videoError, setVideoError] = useState(false);
  const [isPlaying, setIsPlaying] = useState(true); // Track play state
  const [isMuted, setIsMuted] = useState(true); // Track mute state
  const videoRef = useRef(null); // Reference to video element

  const videoSrc = "/eco-farm.mp4";
  const fallbackImage = "/images/farm-fallback.jpg";

  // Toggle play/pause
  const togglePlay = () => {
    if (videoRef.current) {
      if (isPlaying) {
        videoRef.current.pause();
      } else {
        videoRef.current.play().catch(() => {
          setVideoError(true); // Fallback to image if playback fails
        });
      }
      setIsPlaying(!isPlaying);
    }
  };

  // Toggle mute/unmute
  const toggleMute = () => {
    if (videoRef.current) {
      videoRef.current.muted = !isMuted;
      setIsMuted(!isMuted);
    }
  };

  // Intersection Observer to handle play/pause based on visibility
  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (videoRef.current) {
          if (entry.isIntersecting && isPlaying) {
            // Play video if visible and not manually paused
            videoRef.current.play().catch(() => setVideoError(true));
          } else {
            // Pause video if not visible
            videoRef.current.pause();
          }
        }
      },
      {
        threshold: 0.5, // Trigger when 50% of the video is visible
      }
    );

    if (videoRef.current) {
      observer.observe(videoRef.current);
    }

    // Cleanup observer on component unmount
    return () => {
      if (videoRef.current) {
        observer.unobserve(videoRef.current);
      }
    };
  }, [isPlaying]); // Re-run effect if isPlaying changes

  return (
    <DefaultLayout>
      <Head>
        {/* Existing metadata unchanged */}
        <title>Eco B·∫Øc Giang: T∆∞∆°ng Lai C·ªßa N√¥ng Nghi·ªáp B·ªÅn V·ªØng</title>
        <meta
          name="description"
          content="Kh√°m ph√° √Ω nghƒ©a logo c·ªßa Eco B·∫Øc Giang - bi·ªÉu t∆∞·ª£ng c·ªßa s·ª± k·∫øt h·ª£p gi·ªØa n√¥ng nghi·ªáp h·ªØu c∆° v√† c√¥ng ngh·ªá cao, ƒë·ªãnh h∆∞·ªõng ph√°t tri·ªÉn b·ªÅn v·ªØng t·∫°i Vi·ªát Nam."
        />
        <meta
          name="keywords"
          content="Eco B·∫Øc Giang, √Ω nghƒ©a logo Eco B·∫Øc Giang, n√¥ng nghi·ªáp c√¥ng ngh·ªá cao, s·∫£n xu·∫•t h·ªØu c∆°, ph√°t tri·ªÉn b·ªÅn v·ªØng, c√¥ng ngh·ªá th√¥ng minh"
        />
        <meta name="author" content="Eco B·∫Øc Giang" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta
          property="og:title"
          content="Eco B·∫Øc Giang: T∆∞∆°ng Lai C·ªßa N√¥ng Nghi·ªáp B·ªÅn V·ªØng"
        />
        <meta
          property="og:description"
          content="Kh√°m ph√° √Ω nghƒ©a logo c·ªßa Eco B·∫Øc Giang - bi·ªÉu t∆∞·ª£ng c·ªßa s·ª± k·∫øt h·ª£p gi·ªØa n√¥ng nghi·ªáp h·ªØu c∆° v√† c√¥ng ngh·ªá cao, ƒë·ªãnh h∆∞·ªõng ph√°t tri·ªÉn b·ªÅn v·ªØng t·∫°i Vi·ªát Nam."
        />
        <meta
          property="og:image"
          content={`${process.env.NEXT_PUBLIC_BASE_URL}/baner.webp`}
        />
        <meta
          property="og:url"
          content={`${process.env.NEXT_PUBLIC_BASE_URL}/baner.webp`}
        />
        <meta property="og:type" content="website" />
        <meta property="og:locale" content="vi_VN" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta
          name="twitter:title"
          content="√ù nghƒ©a logo Eco B·∫Øc Giang | Ph√°t tri·ªÉn b·ªÅn v·ªØng"
        />
        <meta
          name="twitter:description"
          content="Bi·ªÉu t∆∞·ª£ng Eco B·∫Øc Giang ph·∫£n √°nh s·ª± k·∫øt h·ª£p gi·ªØa n√¥ng nghi·ªáp h·ªØu c∆° v√† c√¥ng ngh·ªá cao, h∆∞·ªõng ƒë·∫øn m·ª•c ti√™u ph√°t tri·ªÉn b·ªÅn v·ªØng."
        />
        <meta
          name="twitter:image"
          content={`${process.env.NEXT_PUBLIC_BASE_URL}/baner.webp`}
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="h-[80px] bg-white"></div>

      <div className="bg-white py-6 px-6">
        <div className="container md:w-10/12 mx-auto grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
          {/* Text Section */}
          <div>
            <h2 className="text-2xl font-bold text-green-700 mb-4 border-b-4 border-green-300 inline-block pb-1">
              Eco B·∫Øc Giang: <br />
              T∆∞∆°ng Lai C·ªßa N√¥ng Nghi·ªáp B·ªÅn V·ªØng
            </h2>
            <p className="mb-4 text-gray-700">
              <strong className="text-green-700">Kh·ªüi Ngu·ªìn T·ª´ M·ªôt T·∫ßm Nh√¨n: </strong>
              Gi·ªØa v√πng ƒë·∫•t tr√π ph√∫ c·ªßa B·∫Øc Giang, Eco B·∫Øc Giang kh√¥ng ch·ªâ ƒë∆°n thu·∫ßn l√† m·ªôt c√¥ng ty n√¥ng nghi·ªáp, m√† c√≤n l√† bi·ªÉu t∆∞·ª£ng c·ªßa s·ª± ƒë·ªïi m·ªõi trong ng√†nh n√¥ng nghi·ªáp Vi·ªát Nam.
            </p>
            <p className="mb-4 text-gray-700">
              V·ªõi t·∫ßm nh√¨n r√µ r√†ng v√† ƒë·∫ßy tham v·ªçng, <strong className="text-green-700">Eco B·∫Øc Giang</strong> h∆∞·ªõng t·ªõi tr·ªü th√†nh ng∆∞·ªùi ti√™n phong trong lƒ©nh v·ª±c n√¥ng nghi·ªáp th√¥ng minh v√† s·∫£n xu·∫•t h·ªØu c∆° b·ªÅn v·ªØng. ƒê∆∞·ª£c th√†nh l·∫≠p d·ª±a tr√™n n·ªÅn t·∫£ng c·ªßa tri th·ª©c hi·ªán ƒë·∫°i v√† t√¨nh y√™u thi√™n nhi√™n, Eco B·∫Øc Giang cam k·∫øt x√¢y d·ª±ng m·ªôt h·ªá sinh th√°i n√¥ng nghi·ªáp h√†i h√≤a gi·ªØa con ng∆∞·ªùi v√† m√¥i tr∆∞·ªùng, ƒë·ªìng th·ªùi g√≥p ph·∫ßn v√†o m·ª•c ti√™u <strong className="text-green-700">Net Zero 2050</strong>.
            </p>
          </div>

          {/* Video Section */}
          <div className="relative max-w-screen-xl mx-auto rounded-lg shadow-lg overflow-hidden">
            <div className="relative w-full rounded-lg overflow-hidden">
              {videoError ? (
                <Image
                  src={fallbackImage}
                  alt="C·∫£nh trang tr·∫°i h·ªØu c∆° Eco B·∫Øc Giang"
                  fill
                  style={{ objectFit: "cover" }}
                  quality={75}
                  loading="lazy"
                />
              ) : (
                <div className="relative">
                  <video
                    ref={videoRef}
                    className="w-full h-auto max-h-full object-contain mx-auto"
                    src={videoSrc}
                    autoPlay // Start muted autoplay
                    muted={isMuted} // Controlled by state
                    loop
                    playsInline
                    preload="metadata"
                    tabIndex={0}
                    title="Video gi·ªõi thi·ªáu n√¥ng tr·∫°i Eco B·∫Øc Giang"
                    aria-label="Video gi·ªõi thi·ªáu n√¥ng tr·∫°i Eco B·∫Øc Giang"
                    onError={() => setVideoError(true)}
                    onKeyDown={(e) => {
                      if (e.key === "Enter" || e.key === " ") {
                        togglePlay();
                      }
                    }}
                  />
                  {/* Controls Overlay */}
                  <div className="absolute bottom-4 right-4 flex space-x-2">
                    <button
                      onClick={togglePlay}
                      className="bg-black bg-opacity-50 hover:bg-opacity-75 text-white p-2 rounded-full"
                      aria-label={isPlaying ? "T·∫°m d·ª´ng video" : "Ph√°t video"}
                    >
                      {isPlaying ? "‚ùö‚ùö" : "‚ñ∂"}
                    </button>
                    <button
                      onClick={toggleMute}
                      className="bg-black bg-opacity-50 hover:bg-opacity-75 text-white p-2 rounded-full"
                      aria-label={isMuted ? "B·∫≠t √¢m thanh" : "T·∫Øt √¢m thanh"}
                    >
                      {isMuted ? "üîá" : "üîä"}
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
        <BusinessPhilosophy />
        <Intro />
        <QualityPolicy />
      </div>
    </DefaultLayout>
  );
}